(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3172],{41749:function(e,t,n){"use strict";var a=n(45987),r=n(87462),o=n(67294),i=(n(45697),n(86010)),s=n(1591),l=[0,1,2,3,4,5,6,7,8,9,10],c=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function p(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var u=o.forwardRef((function(e,t){var n=e.alignContent,s=void 0===n?"stretch":n,l=e.alignItems,c=void 0===l?"stretch":l,p=e.classes,u=e.className,d=e.component,m=void 0===d?"div":d,g=e.container,h=void 0!==g&&g,k=e.direction,f=void 0===k?"row":k,b=e.item,y=void 0!==b&&b,j=e.justify,N=void 0===j?"flex-start":j,O=e.lg,x=void 0!==O&&O,v=e.md,w=void 0!==v&&v,S=e.sm,T=void 0!==S&&S,Z=e.spacing,P=void 0===Z?0:Z,E=e.wrap,I=void 0===E?"wrap":E,C=e.xl,q=void 0!==C&&C,A=e.xs,M=void 0!==A&&A,R=e.zeroMinWidth,D=void 0!==R&&R,_=(0,a.Z)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),L=(0,i.Z)(p.root,u,h&&[p.container,0!==P&&p["spacing-xs-".concat(String(P))]],y&&p.item,D&&p.zeroMinWidth,"row"!==f&&p["direction-xs-".concat(String(f))],"wrap"!==I&&p["wrap-xs-".concat(String(I))],"stretch"!==c&&p["align-items-xs-".concat(String(c))],"stretch"!==s&&p["align-content-xs-".concat(String(s))],"flex-start"!==N&&p["justify-xs-".concat(String(N))],!1!==M&&p["grid-xs-".concat(String(M))],!1!==T&&p["grid-sm-".concat(String(T))],!1!==w&&p["grid-md-".concat(String(w))],!1!==x&&p["grid-lg-".concat(String(x))],!1!==q&&p["grid-xl-".concat(String(q))]);return o.createElement(m,(0,r.Z)({className:L,ref:t},_))})),d=(0,s.Z)((function(e){return(0,r.Z)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return l.forEach((function(a){var r=e.spacing(a);0!==r&&(n["spacing-".concat(t,"-").concat(a)]={margin:"-".concat(p(r,2)),width:"calc(100% + ".concat(p(r),")"),"& > $item":{padding:p(r,2)}})})),n}(e,"xs"),e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var a={};c.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var r="".concat(Math.round(e/12*1e8)/1e6,"%");a[t]={flexBasis:r,flexGrow:0,maxWidth:r}}else a[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else a[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?(0,r.Z)(e,a):e[t.breakpoints.up(n)]=a}(t,e,n),t}),{}))}),{name:"MuiGrid"})(u);t.Z=d},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"===typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},61969:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs",function(){return n(91826)}])},91826:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return q}});var a=n(85893),r=n(35085),o=n(99534),i=n(67294),s=n(3905),l=n(8920),c=n(79895),p=n(22318),u=n(88867),d=n(41664),m=n.n(d);function g(){var e=(0,l.Z)(),t=(0,i.useContext)(u.Z).session;return t.apiKey?(0,a.jsxs)("div",{children:[(0,a.jsx)("p",{children:"Here is your API key:"}),(0,a.jsx)(c.Z,{variant:"outlined",style:{padding:e.spacing(2),fontFamily:e.typography.codeFont},children:t.apiKey})]}):(0,a.jsx)(p.Z,{children:(0,a.jsx)(m(),{href:"/sign-up",children:(0,a.jsx)("a",{children:"Sign up to obtain an API Key"})})})}var h=n(47568),k=n(34051),f=n.n(k),b=n(41120),y=n(41749),j=n(95477),N=n(11163);var O=(0,b.Z)((function(e){return{root:{cursor:"pointer",display:"flex",flexDirection:"row",alignItems:"center","&:hover $link":{display:"block"}},link:{display:"none",marginLeft:e.spacing(.5)}}}));function x(e){var t=e.id,n=e.children,r=e.variant,o=t.toLowerCase().replace(/\W/g,"_"),s=(0,N.useRouter)().push,l=O(),c=(0,i.useCallback)((function(){s("#".concat(o))}),[s]);return(0,a.jsxs)("div",{id:o,className:l.root,onClick:c,children:[(0,a.jsx)("div",{children:n}),(0,a.jsx)(p.Z,{className:l.link,component:"div",variant:r,children:"#"})]})}x.defaultProps={variant:"h2"};var v=(0,i.memo)(x),w=n(80129),S=n(82669),T={"Formula.value":S.Z.formula.body(),"Character Sequence.format":S.Z.character_sequence.body(),"Regular Expression.value":S.Z.regular_expression.body(),"Template.value":S.Z.template.body()},Z=(0,b.Z)((function(e){return{type:{background:e.palette.background.paper,paddingTop:"".concat(e.spacing(4),"px !important")},parameters:{"& code":{display:"inline",padding:"1px 3px"},"& td":{verticalAlign:"top"}}}}));function P(){var e=(0,i.useState)(),t=e[0],n=e[1],r=((0,l.Z)(),Z());return(0,i.useEffect)((function(){(0,w.Z)((0,h.Z)(f().mark((function e(){var t;return f().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=n,e.next=3,fetch("/rest/docs/types").then((function(e){return e.json()}));case 3:e.t1=e.sent,(0,e.t0)(e.t1),(t=location.hash)&&setTimeout((function(){var e;null===(e=document.getElementById(t.slice(1)))||void 0===e||e.scrollIntoView()}),500);case 8:case"end":return e.stop()}}),e)}))))}),[]),t?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(y.Z,{container:!0,spacing:1,children:t.types.map((function(e){return(0,a.jsx)(y.Z,{item:!0,xs:6,sm:4,md:3,children:e.label},e.id)}))}),(0,a.jsx)(p.Z,{variant:"h4",children:"Type Specific Parameters"}),(0,a.jsx)("p",{children:"The following types have additional parameters:"}),(0,a.jsxs)("table",{className:r.parameters,children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Parameter"}),(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Default"}),(0,a.jsx)("th",{children:"Description"})]})}),(0,a.jsx)("tbody",{children:Object.keys(t.parameters).sort().map((function(e){var n=t.parameters[e];return(0,a.jsxs)(i.Fragment,{children:[(0,a.jsx)("tr",{children:(0,a.jsx)("td",{colSpan:4,className:r.type,children:(0,a.jsx)(v,{id:"type_".concat(e),children:(0,a.jsx)(p.Z,{component:"div",children:(0,a.jsx)("b",{children:e})})})})}),Object.keys(n).sort().map((function(t){var r=n[t];return(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:t}),(0,a.jsx)("td",{children:r.type}),(0,a.jsx)("td",{style:{whiteSpace:"nowrap"},children:r.default}),(0,a.jsxs)("td",{children:[(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:r.description}}),r.values&&(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Must be one of the following:"}),(0,a.jsx)("ul",{children:r.values.map((function(e){return(0,a.jsx)("li",{children:e},e)}))})]}),(0,a.jsx)(E,{field:t,type:e})]})]},t)}))]},e)}))})]})]}):(0,a.jsx)(j.Z,{})}function E(e){var t=e.field,n=e.type,a=T["".concat(n,".").concat(t)];return a||null}var I={};function C(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,s.kt)("wrapper",Object.assign({},I,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",null,"Mockaroo APIs"),(0,s.kt)("h2",null,"Overview"),(0,s.kt)("p",null,"Mockaroo offers two different approaches for downloading data programmatically:"),(0,s.kt)("br",null),(0,s.kt)("p",null,(0,s.kt)("a",Object.assign({parentName:"p"},{href:"#generate"}),"Generate API")),(0,s.kt)("p",null,"Mockaroo's Generate API is a single endpoint that you can use to generate data based on a saved schema or fields you define in the post body of the request. Anything you can generate via the website can also be generated via the data API."),(0,s.kt)("br",null),(0,s.kt)("p",null,(0,s.kt)("a",Object.assign({parentName:"p"},{href:"/apis"}),"Mock APIs")),(0,s.kt)("p",null,"Mock APIs give your full control over URLs, handling request parameters, and simulating errors. Mock APIs are ideal for simulating back ends before they're built so you can start working on your front end code. Configure Mock APIs using the APIs link in the header."),(0,s.kt)("h2",null,"Gaining Access"),(0,s.kt)("p",null,'Both APIs require an API Key to be passed with each request, either as a query string parameter called "key" or as an "X-API-Key" request header.'),(0,s.kt)(g,{mdxType:"ApiKey"}),(0,s.kt)("h2",null,"Usage Limits"),(0,s.kt)("p",null,"All API requests are limited to 5000 records. Free plans are limited to 200 requests per day. Silver and Gold plans are limited to a total number of records per day (with no request limit). This allows developers with paid plans to issue many more small requests than would be allowed with a free plan."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Plan"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Limit"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Free"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"200 requests/day")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Silver"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"1,000,000 records/day")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Gold"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"10,000,000 records/day")))),(0,s.kt)(p.Z,{id:"generate",variant:"h2",mdxType:"Typography"},"Generate API"),(0,s.kt)("p",null,"The Mockaroo Generate API has the following methods:"),(0,s.kt)("h3",null,"GET /api/types"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),"GET  https://api.mockaroo.com/api/types?key=(your API key)\n")),(0,s.kt)("p",null,"Returns an array of the available types. Each object has the following keys:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"name")," (string) - The name of the type"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"parameters")," (Object[]) - Additional options that can be specified. Each object has the following keys:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"name")," (string) - The parameter name"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"type")," (string) - The parameter type"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"description")," (string) - A description of the parameter"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"default")," (any) - The default value of the parameter if not specified")))),(0,s.kt)("h3",null,"POST /api/datasets/:name"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),"POST  https://api.mockaroo.com/api/datasets/:name?key=(your API key)&filename=(file name)\n")),(0,s.kt)("p",null,"Uploads a dataset. Specify the data in the request body and the mime type as the Content-Type header.Content-Type must be text/csv or text/plain."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"name")," (required) The name of the dataset to create or update."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"filename")," (optional) The name of the original file. The file name must have a .csv or .txt extension."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"project")," (optional) The name of an existing project to add the dataset to.")),(0,s.kt)("p",null,"Example (JavaScript)"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),"const fetch = require('node-fetch')\nconst fs = require('fs')\n\nfunction upload(apiKey, name, path) {\n  fetch(`https://api.mockaroo.com/api/datasets/${encodeURIComponent(name)}?key=${encodeURIComponent(apiKey)}`, {\n    method: 'post',\n    body: fs.readFileSync(path),\n    headers: {\n      \"content-type\": \"text/csv\"\n    }\n  })\n  .then(res => res.json())\n  .then(result => console.log(result))\n}\n")),(0,s.kt)("h3",null,"DELETE /api/datasets/:name"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),"POST  https://api.mockaroo.com/api/datasets?key=(your API key)&name=(dataset name)&filename=(file name)\n")),(0,s.kt)("p",null,"Deletes a dataset by name."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"name (required) The name of the dataset to delete.")),(0,s.kt)("p",null,"Example (JavaScript)"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),"const fetch = require('node-fetch')\nconst fs = require('fs')\n\nfunction destroy(apiKey, name, path) {\n  fetch(`https://api.mockaroo.com/api/datasets/${encodeURIComponent(name)}?key=${encodeURIComponent(apiKey)}`, {\n    method: 'delete'\n  })\n  .then(res => res.json())\n  .then(result => console.log(result))\n}\n")),(0,s.kt)("h3",null,"POST /api/generate(.format)"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),"POST  https://api.mockaroo.com/api/generate(.format)?key=(your API key)\n")),(0,s.kt)("p",null,"Generates data based on parameters you provide or a saved schema."),(0,s.kt)("h4",null,"Formats"),(0,s.kt)("p",null,"Output format is specified by the file type part of the URL. Two formats are supported:"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Format"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"URL"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"json"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,s.kt)("a",Object.assign({parentName:"td"},{href:"https://api.mockaroo.com/api/generate.json"}),"https://api.mockaroo.com/api/generate.json")),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),'Results are returned as a json object. Results will be returned as an array if the "size" query string parameter is greater than 1.')),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"csv"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,s.kt)("a",Object.assign({parentName:"td"},{href:"https://api.mockaroo.com/api/generate.csv"}),"https://api.mockaroo.com/api/generate.csv")),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Comma separated values. The first row will contain the field names. Subsequent rows will contain the generated data values.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"txt"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,s.kt)("a",Object.assign({parentName:"td"},{href:"https://api.mockaroo.com/api/generate.txt"}),"https://api.mockaroo.com/api/generate.txt")),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Tab-separated values. The first row will contain the field names. Subsequent rows will contain the generated data values.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"custom"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,s.kt)("a",Object.assign({parentName:"td"},{href:"https://api.mockaroo.com/api/generate.custom"}),"https://api.mockaroo.com/api/generate.custom")),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),'Specify a custom delimiter using the "delimiter" query parameter. Specify a custom quote character using the "quote_char" query parameter. The first row will contain the field names. Subsequent rows will contain the generated data values.')),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"sql"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,s.kt)("a",Object.assign({parentName:"td"},{href:"https://api.mockaroo.com/api/generate.sql"}),"https://api.mockaroo.com/api/generate.sql")),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Results are returned as SQL insert statements.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"xml"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),(0,s.kt)("a",Object.assign({parentName:"td"},{href:"https://api.mockaroo.com/api/generate.xml"}),"https://api.mockaroo.com/api/generate.xml")),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Results are returned as an xml document.")))),(0,s.kt)("h4",null,"Query String Parameters"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Parameter"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"key"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string (required)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Your api key")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"callback"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string (optional)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The name of a javascript function to call in the response. If specified, the response will be in jsonp format.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"count"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"integer (optional)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The number of rows to generate. Defaults to 1, or if a saved schema is used, the number of rows specified on the saved schema. When json format is requested, the result will be an object when size = 1, an array when size > 1. Free accounts are limited to 5000 records per download.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"array"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"boolean (optional)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),'When generating json data, Mockaroo will return an array when count > 1 and an object when count is 1. To always return an array, specify a value of "true" for this parameter. Defaults to false.')),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"include_nulls"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"boolean (optional)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"When generating json data, Mockaroo will omit keys with null values if this is set to false.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"include_header"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"boolean (optional)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Only relevant for csv format. Set to false to omit the header row. Defaults to true.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"schema"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string (optional)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The name of a saved schema to use. If this parameter is not specified, you must define the fields in the request body as specified below.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"root_element"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string (optional, only used when format is xml)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The name to give to the root element in the document")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"record_element"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string (optional, only used when format is xml)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The name to give to each element representing a record")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"delimiter"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"character (optional, only used when format is custom)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The character to use as a column separator")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"quote_char"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"character (optional, only used when format is custom)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The character to use when enclosing values. Defaults to double-quote.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"line_ending"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string (optional, only used when format is custom)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),'"unix" or "windows"')),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"bom"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"boolean (optional, only used when format is csv, txt, or custom)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"true to include the BOM (byte order mark). Defaults to false.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"fields"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"json array (optional)"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"A json array of field specifications. See request body below for details. When using JSONP, you must specify fields using this URL parameter as JSONP does not allow the caller to pass data in the body of the request.")))),(0,s.kt)("h4",null,"Request Body"),(0,s.kt)("p",null,"If the schema url parameter is not specified, the request body should be a json array of field specifications. Each item in the array should have the following properties:"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Parameter"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Type"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Default"),(0,s.kt)("th",Object.assign({parentName:"tr"},{align:null}),"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"name"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null})),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),'The name of the field. When using json format, you can use "." in field names to generate nested json objects, brackets to generate arrays. More information...')),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"percentBlank"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"integer"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"0"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"An integer between 0 and 100 that determines what percent of the generated values will be null")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"formula"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"0"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"Alters the generated value using Mockaroo formula syntax. Use this to refer to the value of this field.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"type"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"string"),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null})),(0,s.kt)("td",Object.assign({parentName:"tr"},{align:null}),"The name of one of Mockaroo's types (see below)")))),(0,s.kt)("h4",null,"Types"),(0,s.kt)("p",null,"The following values can be used for the type parameter:"),(0,s.kt)("div",{id:"types"},(0,s.kt)(P,{mdxType:"TypeList"})),(0,s.kt)("h2",null,"Client Libraries"),(0,s.kt)("p",null,"There are several client libraries for the Mockaroo API:"),(0,s.kt)("h3",null,"Node.js"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",Object.assign({parentName:"li"},{href:"https://github.com/mockaroo/mockaroo-node"}),"mockaroo-node")," (officially supported)")),(0,s.kt)("h3",null,"C#"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",Object.assign({parentName:"li"},{href:"https://github.com/djhvscf/mockaroo.api"}),"mockaroo.api")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",Object.assign({parentName:"li"},{href:"https://github.com/amogram/NMockaroo"}),"NMockaroo"))),(0,s.kt)("h3",null,"Example: jQuery (jsonp)"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),'var fields = [{\n    name: "yearsEmployed",\n    type: "Number",\n    min: 1,\n    max: 30,\n    decimals: 0\n}, {\n    name: "department",\n    type: "Custom List",\n    values: ["R+D", "Marketing", "HR"]\n}, {\n    name: "dob",\n    type: "Date",\n    min: "1/1/1950",\n    max: "1/1/2000",\n    format: "%m/%d/%Y"\n}];\n\nvar url = \'https://api.mockaroo.com/api/generate.json?key=abcd1234\' +\n  \'&fields=\' + encodeURIComponent(JSON.stringify(fields));\n\n$.ajax(url, {\n    dataType: \'jsonp\',\n    contentType: \'application/json\',\n    success: function(data) {\n        console.log(\'yearsEmployed\', data.yearsEmployed);\n        console.log(\'department\', data.department);\n        console.log(\'dob\', data.dob);\n    }\n});\n')),(0,s.kt)("p",null,(0,s.kt)("a",Object.assign({parentName:"p"},{href:"https://jsfiddle.net/4eyfqmg8/"}),"Here's a jsFiddle you can play with.")),(0,s.kt)("h3",null,"Example: Node.js"),(0,s.kt)("p",null,"This example uses the ",(0,s.kt)("a",Object.assign({parentName:"p"},{href:"https://github.com/mockaroo/mockaroo-node"}),"official npm module for Mockaroo"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),"var Mockaroo = require('mockaroo'); // npm install mockaroo\n\nvar client = new Mockaroo.Client({\n    apiKey: // your api key here\n})\n\nclient.generate({\n    count: 10,\n    fields: [{\n        name: 'id',\n        type: 'Row Number'\n    }, {\n        name: 'transactionType',\n        type: 'Custom List',\n        values: ['credit', 'debit']\n    }]\n}).then(function(records) {\n    for (var i=0; i<records.length; i++) {\n        var record = records[i];\n        console.log('record ' + i, 'id:' + record.id + ', transactionType:' + record.transactionType);\n    }\n});\n")),(0,s.kt)("h3",null,"Example: Java"),(0,s.kt)("pre",null,(0,s.kt)("code",Object.assign({parentName:"pre"},{}),'package com.mockaroo.api.example;\n\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class Client {\n    public static void main(String[] args) throws IOException {\n        URL url = new URL("https://api.mockaroo.com/api/generate.json?key=abcd1234");\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setDoOutput(true);\n        conn.setRequestMethod("POST");\n        conn.setRequestProperty("Content-Type", "application/json");\n\n        JSONObject yearsEmployed = new JSONObject();\n        yearsEmployed.put("name", "yearsEmployed");\n        yearsEmployed.put("type", "Number");\n        yearsEmployed.put("min", 1);\n        yearsEmployed.put("max", 30);\n        yearsEmployed.put("decimals", 0);\n\n        JSONObject department = new JSONObject();\n        department.put("name", "department");\n        department.put("type", "Custom List");\n        JSONArray values = new JSONArray();\n        values.put("R+D");\n        values.put("Marketing");\n        values.put("HR");\n        department.put("values", values);\n\n        JSONObject dob = new JSONObject();\n        dob.put("name", "dob");\n        dob.put("type", "Date");\n        dob.put("min", "1/1/1950");\n        dob.put("max", "1/1/2000");\n        dob.put("format", "%m/%d/%Y");\n\n        JSONArray fields = new JSONArray();\n        fields.put(yearsEmployed);\n        fields.put(department);\n        fields.put(dob);\n\n        OutputStream os = conn.getOutputStream();\n        os.write(fields.toString().getBytes());\n        os.flush();\n\n        JSONObject data = new JSONObject(IOUtils.toString(conn.getInputStream()));\n\n        System.out.println(data.getInt("yearsEmployed"));\n        System.out.println(data.getString("department"));\n        System.out.println(data.getString("dob"));\n    }\n}\n')))}function q(){return(0,a.jsx)(r.Z,{children:(0,a.jsx)(C,{})})}C.isMDXComponent=!0},35085:function(e,t,n){"use strict";n.d(t,{Z:function(){return m}});var a=n(26042),r=n(69396),o=n(85893),i=n(22318),s=n(41120),l=n(43832),c=n(88105),p=n(3905),u={h1:function(e){return(0,o.jsx)(i.Z,(0,r.Z)((0,a.Z)({variant:"h1"},e),{gutterBottom:!0}))},h2:function(e){return(0,o.jsx)(i.Z,(0,r.Z)((0,a.Z)({variant:"h2"},e),{gutterBottom:!0}))},h3:function(e){return(0,o.jsx)(i.Z,(0,r.Z)((0,a.Z)({variant:"h3"},e),{gutterBottom:!0}))},h4:function(e){return(0,o.jsx)(i.Z,(0,r.Z)((0,a.Z)({variant:"h4"},e),{gutterBottom:!0}))},h5:function(e){return(0,o.jsx)(i.Z,(0,r.Z)((0,a.Z)({variant:"h5"},e),{gutterBottom:!0}))},p:function(e){return(0,o.jsx)(i.Z,(0,a.Z)({},e))}},d=(0,s.Z)((function(e){return{root:{marginTop:e.spacing(4),"& h2, & h3, & h4, & h5":{marginBottom:"1em",marginTop:"2em"},"& h2":{fontSize:"1.65em"},"& h3":{fontSize:"1.5em",fontWeight:"bold"},"& h4":{fontSize:"1.4em",fontWeight:"bold"},"& h1, & p":{marginBottom:"1em"},"& table":{borderCollapse:"collapse"},"& td, & th":{border:"1px solid ".concat(c.Z[700]),padding:e.spacing(1,1.5),textAlign:"left"},"& code":{padding:e.spacing(2,2),margin:e.spacing(2,0),display:"block",background:c.Z[900]},"& ul":(0,a.Z)({paddingLeft:e.spacing(2)},e.typography.body2)}}}));function m(e){var t=d();return(0,o.jsx)(l.Z,{maxWidth:"xl",className:t.root,children:(0,o.jsx)(p.Zo,(0,a.Z)({components:u},e))})}}},function(e){e.O(0,[4904,9774,2888,179],(function(){return t=61969,e(e.s=t);var t}));var t=e.O();_N_E=t}]);